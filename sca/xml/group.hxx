// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef XML_GROUP_HXX
#define XML_GROUP_HXX

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 4000000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< char, type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  typedef ::xsd::cxx::tree::content_order content_order;
  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class group;
class behaviour;
class person;
class profile;
class frame;
class bb;

#include <memory>    // ::std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class group: public ::xml_schema::type
{
  public:
  // behaviour
  //
  typedef ::behaviour behaviour_type;
  typedef ::xsd::cxx::tree::sequence< behaviour_type > behaviour_sequence;
  typedef behaviour_sequence::iterator behaviour_iterator;
  typedef behaviour_sequence::const_iterator behaviour_const_iterator;
  typedef ::xsd::cxx::tree::traits< behaviour_type, char > behaviour_traits;

  const behaviour_sequence&
  behaviour () const;

  behaviour_sequence&
  behaviour ();

  void
  behaviour (const behaviour_sequence& s);

  // description
  //
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // Constructors.
  //
  group ();

  group (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  group (const group& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual group*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  group&
  operator= (const group& x);

  virtual 
  ~group ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  behaviour_sequence behaviour_;
  description_optional description_;
};

class behaviour: public ::xml_schema::type
{
  public:
  // person
  //
  typedef ::person person_type;
  typedef ::xsd::cxx::tree::sequence< person_type > person_sequence;
  typedef person_sequence::iterator person_iterator;
  typedef person_sequence::const_iterator person_const_iterator;
  typedef ::xsd::cxx::tree::traits< person_type, char > person_traits;

  const person_sequence&
  person () const;

  person_sequence&
  person ();

  void
  person (const person_sequence& s);

  // type
  //
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::optional< type_type > type_optional;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_optional&
  type () const;

  type_optional&
  type ();

  void
  type (const type_type& x);

  void
  type (const type_optional& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  behaviour ();

  behaviour (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  behaviour (const behaviour& x,
             ::xml_schema::flags f = 0,
             ::xml_schema::container* c = 0);

  virtual behaviour*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  behaviour&
  operator= (const behaviour& x);

  virtual 
  ~behaviour ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  person_sequence person_;
  type_optional type_;
};

class person: public ::xml_schema::type
{
  public:
  // profile
  //
  typedef ::profile profile_type;
  typedef ::xsd::cxx::tree::sequence< profile_type > profile_sequence;
  typedef profile_sequence::iterator profile_iterator;
  typedef profile_sequence::const_iterator profile_const_iterator;
  typedef ::xsd::cxx::tree::traits< profile_type, char > profile_traits;

  const profile_sequence&
  profile () const;

  profile_sequence&
  profile ();

  void
  profile (const profile_sequence& s);

  // id
  //
  typedef ::xml_schema::short_ id_type;
  typedef ::xsd::cxx::tree::optional< id_type > id_optional;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_optional&
  id () const;

  id_optional&
  id ();

  void
  id (const id_type& x);

  void
  id (const id_optional& x);

  // description
  //
  typedef ::xml_schema::string description_type;
  typedef ::xsd::cxx::tree::optional< description_type > description_optional;
  typedef ::xsd::cxx::tree::traits< description_type, char > description_traits;

  const description_optional&
  description () const;

  description_optional&
  description ();

  void
  description (const description_type& x);

  void
  description (const description_optional& x);

  void
  description (::std::auto_ptr< description_type > p);

  // Constructors.
  //
  person ();

  person (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  person (const person& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual person*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  person&
  operator= (const person& x);

  virtual 
  ~person ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  profile_sequence profile_;
  id_optional id_;
  description_optional description_;
};

class profile: public ::xml_schema::type
{
  public:
  // frame
  //
  typedef ::frame frame_type;
  typedef ::xsd::cxx::tree::sequence< frame_type > frame_sequence;
  typedef frame_sequence::iterator frame_iterator;
  typedef frame_sequence::const_iterator frame_const_iterator;
  typedef ::xsd::cxx::tree::traits< frame_type, char > frame_traits;

  const frame_sequence&
  frame () const;

  frame_sequence&
  frame ();

  void
  frame (const frame_sequence& s);

  // type
  //
  typedef ::xml_schema::string type_type;
  typedef ::xsd::cxx::tree::optional< type_type > type_optional;
  typedef ::xsd::cxx::tree::traits< type_type, char > type_traits;

  const type_optional&
  type () const;

  type_optional&
  type ();

  void
  type (const type_type& x);

  void
  type (const type_optional& x);

  void
  type (::std::auto_ptr< type_type > p);

  // Constructors.
  //
  profile ();

  profile (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  profile (const profile& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

  virtual profile*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  profile&
  operator= (const profile& x);

  virtual 
  ~profile ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  frame_sequence frame_;
  type_optional type_;
};

class frame: public ::xml_schema::type
{
  public:
  // bb
  //
  typedef ::bb bb_type;
  typedef ::xsd::cxx::tree::traits< bb_type, char > bb_traits;

  const bb_type&
  bb () const;

  bb_type&
  bb ();

  void
  bb (const bb_type& x);

  void
  bb (::std::auto_ptr< bb_type > p);

  // no
  //
  typedef ::xml_schema::short_ no_type;
  typedef ::xsd::cxx::tree::optional< no_type > no_optional;
  typedef ::xsd::cxx::tree::traits< no_type, char > no_traits;

  const no_optional&
  no () const;

  no_optional&
  no ();

  void
  no (const no_type& x);

  void
  no (const no_optional& x);

  // Constructors.
  //
  frame (const bb_type&);

  frame (::std::auto_ptr< bb_type >);

  frame (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  frame (const frame& x,
         ::xml_schema::flags f = 0,
         ::xml_schema::container* c = 0);

  virtual frame*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  frame&
  operator= (const frame& x);

  virtual 
  ~frame ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< bb_type > bb_;
  no_optional no_;
};

class bb: public ::xml_schema::string
{
  public:
  // ul_x
  //
  typedef ::xml_schema::short_ ul_x_type;
  typedef ::xsd::cxx::tree::optional< ul_x_type > ul_x_optional;
  typedef ::xsd::cxx::tree::traits< ul_x_type, char > ul_x_traits;

  const ul_x_optional&
  ul_x () const;

  ul_x_optional&
  ul_x ();

  void
  ul_x (const ul_x_type& x);

  void
  ul_x (const ul_x_optional& x);

  // ul_y
  //
  typedef ::xml_schema::short_ ul_y_type;
  typedef ::xsd::cxx::tree::optional< ul_y_type > ul_y_optional;
  typedef ::xsd::cxx::tree::traits< ul_y_type, char > ul_y_traits;

  const ul_y_optional&
  ul_y () const;

  ul_y_optional&
  ul_y ();

  void
  ul_y (const ul_y_type& x);

  void
  ul_y (const ul_y_optional& x);

  // lr_x
  //
  typedef ::xml_schema::short_ lr_x_type;
  typedef ::xsd::cxx::tree::optional< lr_x_type > lr_x_optional;
  typedef ::xsd::cxx::tree::traits< lr_x_type, char > lr_x_traits;

  const lr_x_optional&
  lr_x () const;

  lr_x_optional&
  lr_x ();

  void
  lr_x (const lr_x_type& x);

  void
  lr_x (const lr_x_optional& x);

  // lr_y
  //
  typedef ::xml_schema::short_ lr_y_type;
  typedef ::xsd::cxx::tree::optional< lr_y_type > lr_y_optional;
  typedef ::xsd::cxx::tree::traits< lr_y_type, char > lr_y_traits;

  const lr_y_optional&
  lr_y () const;

  lr_y_optional&
  lr_y ();

  void
  lr_y (const lr_y_type& x);

  void
  lr_y (const lr_y_optional& x);

  // or
  //
  typedef ::xml_schema::float_ or_type;
  typedef ::xsd::cxx::tree::optional< or_type > or_optional;
  typedef ::xsd::cxx::tree::traits< or_type, char > or_traits;

  const or_optional&
  or_ () const;

  or_optional&
  or_ ();

  void
  or_ (const or_type& x);

  void
  or_ (const or_optional& x);

  // gp_x
  //
  typedef ::xml_schema::float_ gp_x_type;
  typedef ::xsd::cxx::tree::optional< gp_x_type > gp_x_optional;
  typedef ::xsd::cxx::tree::traits< gp_x_type, char > gp_x_traits;

  const gp_x_optional&
  gp_x () const;

  gp_x_optional&
  gp_x ();

  void
  gp_x (const gp_x_type& x);

  void
  gp_x (const gp_x_optional& x);

  // gp_y
  //
  typedef ::xml_schema::float_ gp_y_type;
  typedef ::xsd::cxx::tree::optional< gp_y_type > gp_y_optional;
  typedef ::xsd::cxx::tree::traits< gp_y_type, char > gp_y_traits;

  const gp_y_optional&
  gp_y () const;

  gp_y_optional&
  gp_y ();

  void
  gp_y (const gp_y_type& x);

  void
  gp_y (const gp_y_optional& x);

  // gp_or
  //
  typedef ::xml_schema::float_ gp_or_type;
  typedef ::xsd::cxx::tree::optional< gp_or_type > gp_or_optional;
  typedef ::xsd::cxx::tree::traits< gp_or_type, char > gp_or_traits;

  const gp_or_optional&
  gp_or () const;

  gp_or_optional&
  gp_or ();

  void
  gp_or (const gp_or_type& x);

  void
  gp_or (const gp_or_optional& x);

  // Constructors.
  //
  bb ();

  bb (const char*);

  bb (const ::std::string&);

  bb (const ::xml_schema::string&);

  bb (const ::xercesc::DOMElement& e,
      ::xml_schema::flags f = 0,
      ::xml_schema::container* c = 0);

  bb (const bb& x,
      ::xml_schema::flags f = 0,
      ::xml_schema::container* c = 0);

  virtual bb*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  bb&
  operator= (const bb& x);

  virtual 
  ~bb ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ul_x_optional ul_x_;
  ul_y_optional ul_y_;
  lr_x_optional lr_x_;
  lr_y_optional lr_y_;
  or_optional or__;
  gp_x_optional gp_x_;
  gp_y_optional gp_y_;
  gp_or_optional gp_or_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::group >
group_ (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::group >
group_ (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::group >
group_ (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::group >
group_ (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::group >
group_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
group_ (::std::ostream& os,
        const ::group& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

void
group_ (::std::ostream& os,
        const ::group& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

void
group_ (::std::ostream& os,
        const ::group& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
group_ (::xercesc::XMLFormatTarget& ft,
        const ::group& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

void
group_ (::xercesc::XMLFormatTarget& ft,
        const ::group& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

void
group_ (::xercesc::XMLFormatTarget& ft,
        const ::group& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
group_ (::xercesc::DOMDocument& d,
        const ::group& x,
        ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
group_ (const ::group& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

void
operator<< (::xercesc::DOMElement&, const group&);

void
operator<< (::xercesc::DOMElement&, const behaviour&);

void
operator<< (::xercesc::DOMElement&, const person&);

void
operator<< (::xercesc::DOMElement&, const profile&);

void
operator<< (::xercesc::DOMElement&, const frame&);

void
operator<< (::xercesc::DOMElement&, const bb&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // XML_GROUP_HXX
