// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "frame_info.hxx"

// frame_info_t
// 

const frame_info_t::frame_id_type& frame_info_t::
frame_id () const
{
  return this->frame_id_.get ();
}

frame_info_t::frame_id_type& frame_info_t::
frame_id ()
{
  return this->frame_id_.get ();
}

void frame_info_t::
frame_id (const frame_id_type& x)
{
  this->frame_id_.set (x);
}

const frame_info_t::roi_sequence& frame_info_t::
roi () const
{
  return this->roi_;
}

frame_info_t::roi_sequence& frame_info_t::
roi ()
{
  return this->roi_;
}

void frame_info_t::
roi (const roi_sequence& s)
{
  this->roi_ = s;
}


// roi
// 

const roi::profile_type_type& roi::
profile_type () const
{
  return this->profile_type_.get ();
}

roi::profile_type_type& roi::
profile_type ()
{
  return this->profile_type_.get ();
}

void roi::
profile_type (const profile_type_type& x)
{
  this->profile_type_.set (x);
}

void roi::
profile_type (::std::auto_ptr< profile_type_type > x)
{
  this->profile_type_.set (x);
}

const roi::person_id_type& roi::
person_id () const
{
  return this->person_id_.get ();
}

roi::person_id_type& roi::
person_id ()
{
  return this->person_id_.get ();
}

void roi::
person_id (const person_id_type& x)
{
  this->person_id_.set (x);
}

const roi::behaviour_type_type& roi::
behaviour_type () const
{
  return this->behaviour_type_.get ();
}

roi::behaviour_type_type& roi::
behaviour_type ()
{
  return this->behaviour_type_.get ();
}

void roi::
behaviour_type (const behaviour_type_type& x)
{
  this->behaviour_type_.set (x);
}

void roi::
behaviour_type (::std::auto_ptr< behaviour_type_type > x)
{
  this->behaviour_type_.set (x);
}

const roi::person_description_type& roi::
person_description () const
{
  return this->person_description_.get ();
}

roi::person_description_type& roi::
person_description ()
{
  return this->person_description_.get ();
}

void roi::
person_description (const person_description_type& x)
{
  this->person_description_.set (x);
}

void roi::
person_description (::std::auto_ptr< person_description_type > x)
{
  this->person_description_.set (x);
}

const roi::bb_ul_x_type& roi::
bb_ul_x () const
{
  return this->bb_ul_x_.get ();
}

roi::bb_ul_x_type& roi::
bb_ul_x ()
{
  return this->bb_ul_x_.get ();
}

void roi::
bb_ul_x (const bb_ul_x_type& x)
{
  this->bb_ul_x_.set (x);
}

const roi::bb_ul_y_type& roi::
bb_ul_y () const
{
  return this->bb_ul_y_.get ();
}

roi::bb_ul_y_type& roi::
bb_ul_y ()
{
  return this->bb_ul_y_.get ();
}

void roi::
bb_ul_y (const bb_ul_y_type& x)
{
  this->bb_ul_y_.set (x);
}

const roi::bb_lr_x_type& roi::
bb_lr_x () const
{
  return this->bb_lr_x_.get ();
}

roi::bb_lr_x_type& roi::
bb_lr_x ()
{
  return this->bb_lr_x_.get ();
}

void roi::
bb_lr_x (const bb_lr_x_type& x)
{
  this->bb_lr_x_.set (x);
}

const roi::bb_lr_y_type& roi::
bb_lr_y () const
{
  return this->bb_lr_y_.get ();
}

roi::bb_lr_y_type& roi::
bb_lr_y ()
{
  return this->bb_lr_y_.get ();
}

void roi::
bb_lr_y (const bb_lr_y_type& x)
{
  this->bb_lr_y_.set (x);
}

const roi::bb_or_type& roi::
bb_or () const
{
  return this->bb_or_.get ();
}

roi::bb_or_type& roi::
bb_or ()
{
  return this->bb_or_.get ();
}

void roi::
bb_or (const bb_or_type& x)
{
  this->bb_or_.set (x);
}

const roi::bb_gp_x_type& roi::
bb_gp_x () const
{
  return this->bb_gp_x_.get ();
}

roi::bb_gp_x_type& roi::
bb_gp_x ()
{
  return this->bb_gp_x_.get ();
}

void roi::
bb_gp_x (const bb_gp_x_type& x)
{
  this->bb_gp_x_.set (x);
}

const roi::bb_gp_y_type& roi::
bb_gp_y () const
{
  return this->bb_gp_y_.get ();
}

roi::bb_gp_y_type& roi::
bb_gp_y ()
{
  return this->bb_gp_y_.get ();
}

void roi::
bb_gp_y (const bb_gp_y_type& x)
{
  this->bb_gp_y_.set (x);
}

const roi::bb_gp_or_type& roi::
bb_gp_or () const
{
  return this->bb_gp_or_.get ();
}

roi::bb_gp_or_type& roi::
bb_gp_or ()
{
  return this->bb_gp_or_.get ();
}

void roi::
bb_gp_or (const bb_gp_or_type& x)
{
  this->bb_gp_or_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// frame_info_t
//

frame_info_t::
frame_info_t (const frame_id_type& frame_id)
: ::xml_schema::type (),
  frame_id_ (frame_id, this),
  roi_ (this)
{
}

frame_info_t::
frame_info_t (const frame_info_t& x,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  frame_id_ (x.frame_id_, f, this),
  roi_ (x.roi_, f, this)
{
}

frame_info_t::
frame_info_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f,
              ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  frame_id_ (this),
  roi_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void frame_info_t::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // frame_id
    //
    if (n.name () == "frame_id" && n.namespace_ ().empty ())
    {
      if (!frame_id_.present ())
      {
        this->frame_id_.set (frame_id_traits::create (i, f, this));
        continue;
      }
    }

    // roi
    //
    if (n.name () == "roi" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< roi_type > r (
        roi_traits::create (i, f, this));

      this->roi_.push_back (r);
      continue;
    }

    break;
  }

  if (!frame_id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "frame_id",
      "");
  }
}

frame_info_t* frame_info_t::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class frame_info_t (*this, f, c);
}

frame_info_t& frame_info_t::
operator= (const frame_info_t& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->frame_id_ = x.frame_id_;
    this->roi_ = x.roi_;
  }

  return *this;
}

frame_info_t::
~frame_info_t ()
{
}

// roi
//

roi::
roi (const profile_type_type& profile_type,
     const person_id_type& person_id,
     const behaviour_type_type& behaviour_type,
     const person_description_type& person_description,
     const bb_ul_x_type& bb_ul_x,
     const bb_ul_y_type& bb_ul_y,
     const bb_lr_x_type& bb_lr_x,
     const bb_lr_y_type& bb_lr_y,
     const bb_or_type& bb_or,
     const bb_gp_x_type& bb_gp_x,
     const bb_gp_y_type& bb_gp_y,
     const bb_gp_or_type& bb_gp_or)
: ::xml_schema::type (),
  profile_type_ (profile_type, this),
  person_id_ (person_id, this),
  behaviour_type_ (behaviour_type, this),
  person_description_ (person_description, this),
  bb_ul_x_ (bb_ul_x, this),
  bb_ul_y_ (bb_ul_y, this),
  bb_lr_x_ (bb_lr_x, this),
  bb_lr_y_ (bb_lr_y, this),
  bb_or_ (bb_or, this),
  bb_gp_x_ (bb_gp_x, this),
  bb_gp_y_ (bb_gp_y, this),
  bb_gp_or_ (bb_gp_or, this)
{
}

roi::
roi (const roi& x,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  profile_type_ (x.profile_type_, f, this),
  person_id_ (x.person_id_, f, this),
  behaviour_type_ (x.behaviour_type_, f, this),
  person_description_ (x.person_description_, f, this),
  bb_ul_x_ (x.bb_ul_x_, f, this),
  bb_ul_y_ (x.bb_ul_y_, f, this),
  bb_lr_x_ (x.bb_lr_x_, f, this),
  bb_lr_y_ (x.bb_lr_y_, f, this),
  bb_or_ (x.bb_or_, f, this),
  bb_gp_x_ (x.bb_gp_x_, f, this),
  bb_gp_y_ (x.bb_gp_y_, f, this),
  bb_gp_or_ (x.bb_gp_or_, f, this)
{
}

roi::
roi (const ::xercesc::DOMElement& e,
     ::xml_schema::flags f,
     ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  profile_type_ (this),
  person_id_ (this),
  behaviour_type_ (this),
  person_description_ (this),
  bb_ul_x_ (this),
  bb_ul_y_ (this),
  bb_lr_x_ (this),
  bb_lr_y_ (this),
  bb_or_ (this),
  bb_gp_x_ (this),
  bb_gp_y_ (this),
  bb_gp_or_ (this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, false, false);
    this->parse (p, f);
  }
}

void roi::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_content (); p.next_content (false))
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // profile_type
    //
    if (n.name () == "profile_type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< profile_type_type > r (
        profile_type_traits::create (i, f, this));

      if (!profile_type_.present ())
      {
        this->profile_type_.set (r);
        continue;
      }
    }

    // person_id
    //
    if (n.name () == "person_id" && n.namespace_ ().empty ())
    {
      if (!person_id_.present ())
      {
        this->person_id_.set (person_id_traits::create (i, f, this));
        continue;
      }
    }

    // behaviour_type
    //
    if (n.name () == "behaviour_type" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< behaviour_type_type > r (
        behaviour_type_traits::create (i, f, this));

      if (!behaviour_type_.present ())
      {
        this->behaviour_type_.set (r);
        continue;
      }
    }

    // person_description
    //
    if (n.name () == "person_description" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< person_description_type > r (
        person_description_traits::create (i, f, this));

      if (!person_description_.present ())
      {
        this->person_description_.set (r);
        continue;
      }
    }

    // bb_ul_x
    //
    if (n.name () == "bb_ul_x" && n.namespace_ ().empty ())
    {
      if (!bb_ul_x_.present ())
      {
        this->bb_ul_x_.set (bb_ul_x_traits::create (i, f, this));
        continue;
      }
    }

    // bb_ul_y
    //
    if (n.name () == "bb_ul_y" && n.namespace_ ().empty ())
    {
      if (!bb_ul_y_.present ())
      {
        this->bb_ul_y_.set (bb_ul_y_traits::create (i, f, this));
        continue;
      }
    }

    // bb_lr_x
    //
    if (n.name () == "bb_lr_x" && n.namespace_ ().empty ())
    {
      if (!bb_lr_x_.present ())
      {
        this->bb_lr_x_.set (bb_lr_x_traits::create (i, f, this));
        continue;
      }
    }

    // bb_lr_y
    //
    if (n.name () == "bb_lr_y" && n.namespace_ ().empty ())
    {
      if (!bb_lr_y_.present ())
      {
        this->bb_lr_y_.set (bb_lr_y_traits::create (i, f, this));
        continue;
      }
    }

    // bb_or
    //
    if (n.name () == "bb_or" && n.namespace_ ().empty ())
    {
      if (!bb_or_.present ())
      {
        this->bb_or_.set (bb_or_traits::create (i, f, this));
        continue;
      }
    }

    // bb_gp_x
    //
    if (n.name () == "bb_gp_x" && n.namespace_ ().empty ())
    {
      if (!bb_gp_x_.present ())
      {
        this->bb_gp_x_.set (bb_gp_x_traits::create (i, f, this));
        continue;
      }
    }

    // bb_gp_y
    //
    if (n.name () == "bb_gp_y" && n.namespace_ ().empty ())
    {
      if (!bb_gp_y_.present ())
      {
        this->bb_gp_y_.set (bb_gp_y_traits::create (i, f, this));
        continue;
      }
    }

    // bb_gp_or
    //
    if (n.name () == "bb_gp_or" && n.namespace_ ().empty ())
    {
      if (!bb_gp_or_.present ())
      {
        this->bb_gp_or_.set (bb_gp_or_traits::create (i, f, this));
        continue;
      }
    }

    break;
  }

  if (!profile_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "profile_type",
      "");
  }

  if (!person_id_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "person_id",
      "");
  }

  if (!behaviour_type_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "behaviour_type",
      "");
  }

  if (!person_description_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "person_description",
      "");
  }

  if (!bb_ul_x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bb_ul_x",
      "");
  }

  if (!bb_ul_y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bb_ul_y",
      "");
  }

  if (!bb_lr_x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bb_lr_x",
      "");
  }

  if (!bb_lr_y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bb_lr_y",
      "");
  }

  if (!bb_or_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bb_or",
      "");
  }

  if (!bb_gp_x_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bb_gp_x",
      "");
  }

  if (!bb_gp_y_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bb_gp_y",
      "");
  }

  if (!bb_gp_or_.present ())
  {
    throw ::xsd::cxx::tree::expected_element< char > (
      "bb_gp_or",
      "");
  }
}

roi* roi::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class roi (*this, f, c);
}

roi& roi::
operator= (const roi& x)
{
  if (this != &x)
  {
    static_cast< ::xml_schema::type& > (*this) = x;
    this->profile_type_ = x.profile_type_;
    this->person_id_ = x.person_id_;
    this->behaviour_type_ = x.behaviour_type_;
    this->person_description_ = x.person_description_;
    this->bb_ul_x_ = x.bb_ul_x_;
    this->bb_ul_y_ = x.bb_ul_y_;
    this->bb_lr_x_ = x.bb_lr_x_;
    this->bb_lr_y_ = x.bb_lr_y_;
    this->bb_or_ = x.bb_or_;
    this->bb_gp_x_ = x.bb_gp_x_;
    this->bb_gp_y_ = x.bb_gp_y_;
    this->bb_gp_or_ = x.bb_gp_or_;
  }

  return *this;
}

roi::
~roi ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::frame_info_t >
frame_info (const ::std::string& u,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::frame_info_t > (
    ::frame_info (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::frame_info_t >
frame_info (const ::std::string& u,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::frame_info_t > (
    ::frame_info (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::frame_info_t >
frame_info (const ::std::string& u,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::frame_info_t > (
    ::frame_info (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::frame_info_t >
frame_info (::std::istream& is,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::frame_info (isrc, f, p);
}

::std::auto_ptr< ::frame_info_t >
frame_info (::std::istream& is,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::frame_info (isrc, h, f, p);
}

::std::auto_ptr< ::frame_info_t >
frame_info (::std::istream& is,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::frame_info (isrc, h, f, p);
}

::std::auto_ptr< ::frame_info_t >
frame_info (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::frame_info (isrc, f, p);
}

::std::auto_ptr< ::frame_info_t >
frame_info (::std::istream& is,
            const ::std::string& sid,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::frame_info (isrc, h, f, p);
}

::std::auto_ptr< ::frame_info_t >
frame_info (::std::istream& is,
            const ::std::string& sid,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::frame_info (isrc, h, f, p);
}

::std::auto_ptr< ::frame_info_t >
frame_info (::xercesc::InputSource& i,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  return ::std::auto_ptr< ::frame_info_t > (
    ::frame_info (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::frame_info_t >
frame_info (::xercesc::InputSource& i,
            ::xml_schema::error_handler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::frame_info_t > (
    ::frame_info (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::frame_info_t >
frame_info (::xercesc::InputSource& i,
            ::xercesc::DOMErrorHandler& h,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  return ::std::auto_ptr< ::frame_info_t > (
    ::frame_info (
      d, f | ::xml_schema::flags::own_dom, p));
}

::std::auto_ptr< ::frame_info_t >
frame_info (const ::xercesc::DOMDocument& doc,
            ::xml_schema::flags f,
            const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      static_cast< ::xercesc::DOMDocument* > (doc.cloneNode (true)));

    return ::std::auto_ptr< ::frame_info_t > (
      ::frame_info (
        d, f | ::xml_schema::flags::own_dom, p));
  }

  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "frame_info" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::frame_info_t > r (
      ::xsd::cxx::tree::traits< ::frame_info_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "frame_info",
    "");
}

::std::auto_ptr< ::frame_info_t >
frame_info (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d,
            ::xml_schema::flags f,
            const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "frame_info" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::frame_info_t > r (
      ::xsd::cxx::tree::traits< ::frame_info_t, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "frame_info",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
frame_info (::std::ostream& o,
            const ::frame_info_t& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::frame_info (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
frame_info (::std::ostream& o,
            const ::frame_info_t& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::frame_info (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
frame_info (::std::ostream& o,
            const ::frame_info_t& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::frame_info (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
frame_info (::xercesc::XMLFormatTarget& t,
            const ::frame_info_t& s,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::frame_info (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
frame_info (::xercesc::XMLFormatTarget& t,
            const ::frame_info_t& s,
            ::xml_schema::error_handler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::frame_info (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
frame_info (::xercesc::XMLFormatTarget& t,
            const ::frame_info_t& s,
            ::xercesc::DOMErrorHandler& h,
            const ::xml_schema::namespace_infomap& m,
            const ::std::string& e,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::frame_info (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
frame_info (::xercesc::DOMDocument& d,
            const ::frame_info_t& s,
            ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "frame_info" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "frame_info",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
frame_info (const ::frame_info_t& s,
            const ::xml_schema::namespace_infomap& m,
            ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "frame_info",
      "",
      m, f));

  ::frame_info (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const frame_info_t& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // frame_id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "frame_id",
        e));

    s << i.frame_id ();
  }

  // roi
  //
  for (frame_info_t::roi_const_iterator
       b (i.roi ().begin ()), n (i.roi ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "roi",
        e));

    s << *b;
  }
}

void
operator<< (::xercesc::DOMElement& e, const roi& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // profile_type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "profile_type",
        e));

    s << i.profile_type ();
  }

  // person_id
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "person_id",
        e));

    s << i.person_id ();
  }

  // behaviour_type
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "behaviour_type",
        e));

    s << i.behaviour_type ();
  }

  // person_description
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "person_description",
        e));

    s << i.person_description ();
  }

  // bb_ul_x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bb_ul_x",
        e));

    s << i.bb_ul_x ();
  }

  // bb_ul_y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bb_ul_y",
        e));

    s << i.bb_ul_y ();
  }

  // bb_lr_x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bb_lr_x",
        e));

    s << i.bb_lr_x ();
  }

  // bb_lr_y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bb_lr_y",
        e));

    s << i.bb_lr_y ();
  }

  // bb_or
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bb_or",
        e));

    s << i.bb_or ();
  }

  // bb_gp_x
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bb_gp_x",
        e));

    s << i.bb_gp_x ();
  }

  // bb_gp_y
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bb_gp_y",
        e));

    s << i.bb_gp_y ();
  }

  // bb_gp_or
  //
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "bb_gp_or",
        e));

    s << i.bb_gp_or ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

